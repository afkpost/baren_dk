// Generated by CoffeeScript 1.7.1
var App, CacheStore, ServerConnection;

CacheStore = (function() {
  function CacheStore() {
    var memory;
    alert("using fake store");
    memory = [];
    this.getItem = function(key) {
      var res;
      res = memory[key];
      if (res != null) {
        return res;
      } else {
        return null;
      }
    };
    this.setItem = function(key, value) {
      return memory[key] = value;
    };
  }

  return CacheStore;

})();

ServerConnection = (function() {
  function ServerConnection(server, log) {
    var ajax, uid;
    if (log == null) {
      log = function() {};
    }
    ajax = function(method, url, body) {
      body = JSON.stringify(body);
      return ($.ajax({
        url: url,
        type: method,
        contentType: "application/json",
        data: body
      })).fail(function(xhr) {
        return log("" + url + ": " + xhr.status + " " + xhr.statusText);
      });
    };
    if (typeof device !== "undefined" && device !== null) {
      uid = device.uuid || 1;
    } else {
      log("could not find device.uuid, uuid = 1");
      uid = 1;
    }
    this.getNews = function() {
      var url;
      url = "" + server;
      return ajax("GET", url);
    };
    this.getOffers = function() {
      var url;
      url = "" + server + "/app/users/" + uid + "/offers";
      return ajax("GET", url);
    };
    this.getDrinks = function() {
      var url;
      url = "" + server + "/drinks";
      return ajax("GET", url);
    };
    this.useOffer = function(id) {
      var url;
      url = "" + server + "/app/users/" + uid + "/offers/" + id;
      return ajax("PUT", url);
    };
    this.getEvents = function() {
      var url;
      url = "" + server + "/semesterplan";
      return ajax("GET", url);
    };
    this.getUpcommingOffers = function() {
      var url;
      url = "" + server + "/app/offers/upcomming";
      return ajax("GET", url);
    };
    this.getUser = function() {
      var url;
      url = "" + server + "/app/users/" + uid;
      return ajax("GET", url);
    };
    this.getScore = function() {
      var url;
      url = "" + server + "/app/users/" + uid + "/checkin";
      return ajax("GET", url);
    };
    this.checkin = function(token) {
      var url;
      url = "" + server + "/app/users/" + uid + "/checkin";
      return ajax("PUT", url, {
        token: token
      });
    };
    this.updateUser = function(user) {
      var url;
      url = "" + server + "/app/users/" + uid;
      return ajax("PUT", url, user);
    };
    this.sendHeartbeat = function() {
      var url;
      url = "" + server + "/app/users/" + uid + "/heartbeat";
      return ajax("PUT", url);
    };
    this.getRanks = function() {
      var url;
      url = "" + server + "/app/ranks";
      return ajax("GET", url);
    };
  }

  return ServerConnection;

})();

App = (function() {
  function App(conn, log) {
    var bus, get, parseDate, platform, pushError, pushNotification, pushSuccess, put, store, updateDrinks, updateEvents, updateNews;
    if (log == null) {
      log = function() {};
    }
    bus = $('<App.bus>');
    store = function(key, value) {
      var event, json, oldValue, res;
      event = key;
      json = JSON.stringify(value);
      key = "App." + key;
      if (value != null) {
        oldValue = window.localStorage.getItem(key);
        if (oldValue !== json) {
          window.localStorage.setItem(key, json);
          return bus.trigger(event, [value]);
        }
      } else {
        res = window.localStorage.getItem(key);
        if (res != null) {
          return JSON.parse(res);
        } else {
          return null;
        }
      }
    };
    parseDate = function(date) {
      if (date == null) {
        return date;
      }
      date = new Date(date);
      return "" + (date.getDate()) + "/" + (date.getMonth() + 1);
    };
    this.on = function(event, callback) {
      var e;
      bus.on(event, function(e, data) {
        return callback(data);
      });
      try {
        return callback(store(event));
      } catch (_error) {
        e = _error;
        return log("could not call callback " + (callback.toString()));
      }
    };
    get = function(key) {
      return function() {
        return store(key);
      };
    };
    put = function(key) {
      return function(key, value) {
        return store(key, value);
      };
    };
    updateNews = function() {
      return conn.getNews().done((function(_this) {
        return function(news) {
          var n, _i, _len;
          news = news.content;
          for (_i = 0, _len = news.length; _i < _len; _i++) {
            n = news[_i];
            n.what = n.what.split(/\n/);
          }
          return store("news", news);
        };
      })(this));
    };
    updateNews();
    updateEvents = function() {
      return conn.getEvents().done(function(events) {
        var es, event, _i, _j, _len, _len1, _ref, _ref1;
        _ref = events.events;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          es = _ref[_i];
          _ref1 = es.events;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            event = _ref1[_j];
            event.url = event.url.replace("http://www.facebook.com/", "fb://");
          }
        }
        return store("events", events);
      });
    };
    updateEvents();
    this.useOffer = function(id) {
      var offers;
      offers = store("offers");
      return (conn.useOffer(id)).done(function(data) {
        var date, offer, _i, _len;
        date = new Date();
        for (_i = 0, _len = offers.length; _i < _len; _i++) {
          offer = offers[_i];
          if (!(offer.id === id)) {
            continue;
          }
          offer.remains--;
          offer.available = false;
          offer.used = "" + (date.getDate()) + "/" + (date.getMonth());
        }
        return store("offers", offers);
      }).fail(this.updateOffers);
    };
    this.updateOffers = function() {
      return conn.getOffers().done(function(offers) {
        var offer, _i, _len;
        for (_i = 0, _len = offers.length; _i < _len; _i++) {
          offer = offers[_i];
          offer.available = true;
          offer.expires = parseDate(offer.expires);
          if (offer.used) {
            offer.available = false;
            offer.used = parseDate(offer.used);
          } else if (offer.remains === 0) {
            offer.available = false;
            offer.text = "Udsolgt";
          }
        }
        offers.sort(function(o1, o2) {
          if ((o1.available != null) || (o2.available == null)) {
            return -1;
          }
          return 1;
        });
        return store("offers", offers);
      });
    };
    this.updateOffers();
    this.updateUpcommingOffers = function() {
      return conn.getUpcommingOffers().done(function(offers) {
        var offer, _i, _len;
        for (_i = 0, _len = offers.length; _i < _len; _i++) {
          offer = offers[_i];
          offer.startDate = parseDate(offer.startDate);
        }
        return store("upcommingOffers", offers);
      });
    };
    this.updateUpcommingOffers();
    updateDrinks = function() {
      return conn.getDrinks().done(function(drinks) {
        drinks = drinks.content;
        return store("drinks", drinks);
      });
    };
    updateDrinks();
    conn.getUser().done(function(user) {
      return store("user", user);
    });
    this.updateUser = function(update) {
      return (conn.updateUser(update)).done(function() {
        var field, user, value;
        user = store("user");
        for (field in update) {
          value = update[field];
          user[field] = value;
        }
        return store("user", user);
      });
    };
    this.checkin = function(token) {
      var res;
      res = conn.checkin(token);
      return res.done(function() {
        var checkins;
        checkins = (store("score")) || 0;
        return store("score", checkins + 1);
      });
    };
    conn.getScore().done(function(score) {
      return store("score", score.score);
    });
    this.updateRanks = function() {
      return conn.getRanks().done(function(ranks) {
        return store("ranks", ranks);
      });
    };
    this.updateRanks();
    if (typeof plugins !== "undefined" && plugins !== null) {
      pushNotification = plugins.pushNotification;
    }
    if (pushNotification != null) {
      pushSuccess = function(success) {
        return log(success);
      };
      pushError = function(err) {
        return log(err);
      };
      platform = device.platform || "unknown";
      platform = platform.toLowerCase();
      log("found platform: " + platform);
      if (platform === "android") {
        window.androidCallback = (function(_this) {
          return function(e) {
            var data, regid;
            log("got event");
            if (e.event === "registered") {
              regid = e.regid;
              log(regid);
              log("updating user");
              return conn.updateUser({
                regid: regid
              });
            } else if (e.event === "message") {
              data = e.payload;
              log(JSON.stringify(data));
              if (e.foreground) {
                if (data.update != null) {
                  switch (data.update) {
                    case "offers":
                      return _this.updateOffers();
                    default:
                      return log("unknown update: " + data.update);
                  }
                }
              }
            } else {
              return log("Unkown event: " + event.type);
            }
          };
        })(this);
        log("platform supported");
        pushNotification.register(pushSuccess, pushError, {
          senderID: "999604987399",
          ecb: "androidCallback"
        });
        log("register called");
      } else {
        log("platform not supported");
      }
    } else {
      log("PushNotification not found");
      conn.updateUser({
        regid: null,
        token: null
      });
    }
    log("setting up heartbeat");
    setInterval(conn.sendHeartbeat, 5 * 60 * 1000);
    conn.sendHeartbeat();
  }

  return App;

})();

if (window.localStorage == null) {
  console.log("Creating CacheStore");
  window.localStorage = new CacheStore();
} else {
  console.log("Using localstorage");
}
